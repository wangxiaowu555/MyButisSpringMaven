<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:jaxws="http://cxf.apache.org/jaxws"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="
                    http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                    http://www.springframework.org/schema/tx
                    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                    http://www.springframework.org/schema/aop
                    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                    http://www.springframework.org/schema/context
                    http://www.springframework.org/schema/context/spring-context-3.1.xsd
                    http://www.springframework.org/schema/cache
                    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
                    http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
                    http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd"
       default-lazy-init="true">
    <context:component-scan base-package="com.lovo.spring.*"></context:component-scan>
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <!-- 获得数据源-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.userName}"/>
        <property name="password" value="${jdbc.pwd}"/>
    </bean>
    <!-- mybaitis的工厂-->
    <bean id="factoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 取别名-->
        <property name="typeAliasesPackage" value="com.lovo.spring.bean"/>
        <!--加载mapper配置文件 -->
        <property name="mapperLocations" value="classpath:com/lovo/spring/dao/*.xml"/>
    </bean>
    <!--用mapped对象绑定我们写的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="factoryBean"></property>
        <property name="basePackage" value="com.lovo.spring.dao"></property>
    </bean>
    <!--事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--因为需要连接才能启动事务，所以连接上了dataSource-->
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--事务的通知，是transactionManager的事务通知-->
    <tx:advice id="myadvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--方法，rollback-for的意思是 当发生Exception(异常)时回滚-->
            <!--事务的传播方式 使用关键词为：propagation="REQUIRED"，默认的就为此种方式，如果使用该方式，可以不配置-->
            <!--事务传播方式与Spring有关系，与数据库无关，是Spring独有的，因为是使用AOP注入到了service层-->
            <!--事务隔离级别（是为了解决在高迸发情况下的情况），
            默认的为READ_COMMITED（事务级别，避免脏读），PEPEATABLE_READ（控制不可重复读，锁行），SERIALIZABLE（控制幻读，锁表），
            默认可不配置DEFAULT是利用底层数据库的默认级别，而数据库已经解决了脏读情况-->
            <tx:method name="addOrder" propagation="REQUIRED" isolation="DEFAULT" rollback-for="Exception"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="outCar" rollback-for="Exception"/>
            <tx:method name="inCar" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    <!--AOP-->
    <aop:config>
        <!--增强通知，注入外部的通知（事务的通知）-->
        <aop:advisor advice-ref="myadvice" pointcut="execution(* com.lovo.spring.service.*.*(..))"/>
    </aop:config>
</beans>